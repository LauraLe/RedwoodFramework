[{"pk": 2, "model": "expecon.experiment", "fields": {"name": "Survival 4", "admin_css": ".badge {\r\n  font-size: 13px;\r\n  line-height: 18px;\r\n  padding: 4px 10px 4px;\r\n  vertical-align: middle;\r\n}\r\n\r\n.warning {\r\n  background-color: #fcf8e3 !important;\r\n}", "comments": "", "experimenter": 1, "admin_html": "<!DOCTYPE HTML>\r\n<html ng-app=\"Redwood\">\r\n<head>\r\n  <title>Economics Experiment</title>\r\n  <script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/lib/jquery/jquery.min.js\"></script>\r\n  <script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/lib/bootstrap/bootstrap-3.1.1.min.js\"></script>\r\n  <script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/lib/angular/angular-1.2.16.js\"></script>\r\n\t<script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/redwoodCore.js\"></script>\r\n\t<script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/redwoodHelpers.js\"></script>\r\n\t<script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/redwoodAdmin.js\"></script>\r\n\t<link type=\"text/css\" rel=\"stylesheet\" href=\"{{ STATIC_URL }}framework/css/bootstrap.min.css\"></link>\r\n\t<script type=\"text/javascript\">\r\n\t\t{{ js }}\r\n\t</script>\r\n\t<style type=\"text/css\">\r\n\t\t{{ css }}\r\n\t</style>\r\n</head>\r\n<body ng-controller=\"AdminCtrl\" style=\"padding-top:60px;\">\r\n\r\n<div class=\"navbar navbar-fixed-top container\">\r\n\t<div class=\"navbar-inner\">\r\n\t\t<div class=\"container-fluid\">\r\n\t\t\t<div class=\"brand\" href=\"#\">Economics Experiment</div>\r\n\t\t\t<div class=\"nav-collapse collapse\">\r\n\t\t\t\t<p class=\"navbar-text pull-right\">Administrator</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<div class=\"container\">\r\n\t<div class=\"row\">\r\n\t\t<div class=\"span3\">\r\n\t\t\t<div class=\"row\">\r\n\t\t\t\t<div class=\"span3\">\r\n\t\t\t\t\t<div class=\"well sidebar-nav\">\r\n\t\t\t\t\t\t<ul class=\"nav nav-list\">\r\n\t\t\t\t\t\t\t<li><span id=\"router-status\" class=\"badge badge-important\"></span></li>\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"row\">\r\n\t\t\t\t<div class=\"span3\">\r\n\t\t\t\t\t<div class=\"well sidebar-nav\">\r\n\t\t\t\t\t\t<ul class=\"nav nav-list\">\r\n\t\t\t\t\t\t\t<li><a href=\"admin/payouts\" target=\"_blank\">View Payouts</a></li>\r\n\t\t\t\t\t\t\t<li><a id=\"archive\" href=\"#\">Archive Session</a></li>\r\n\t\t\t\t\t\t\t<li><a id=\"download\" href=\"admin/download\">Download Data</a></li>\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div class=\"span9\">\r\n\t\t\t<div class=\"row\">\r\n\t\t\t\t<div class=\"span9\">\r\n\t\t\t\t\t<p>Subjects:</p>\r\n\t\t\t\t\t<table class=\"table table-bordered table-condensed table-striped\">\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr><th>ID</th><th>Group</th><th>Period</th><th style=\"width: 150px;\"></th></tr>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody id=\"subject-list\">\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"row\">\r\n\t\t\t\t<div class=\"span6\">\r\n\t\t\t\t\t<button id=\"start-session\" class=\"btn btn-success\">Start Session</button>\r\n\t\t\t\t\t<button id=\"reset-session\" class=\"btn btn-danger\">Reset Session</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"span3\">\r\n\t\t\t\t\t<div class=\"pull-right\">\r\n\t\t\t\t\t\t<button id=\"pause-session\" class=\"btn btn-warning\" disabled=\"disabled\">Pause</button>\r\n\t\t\t\t\t\t<button id=\"resume-session\" class=\"btn btn-primary\" disabled=\"disabled\">Resume</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"row\">\r\n\t\t<div class=\"span12\">\r\n\t\t\t<hr/>\r\n\t\t\t<p>Configuration:</p>\r\n\t\t\t<load-config></load-config>\r\n\t\t\t<div style=\"overflow: auto;\">\r\n\t\t\t\t<table class=\"config table table-bordered table-striped table-condensed\"></table>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "admin_js": "Redwood.controller(\"AdminCtrl\", [\"$rootScope\", \"$scope\", \"Admin\", function($rootScope, $scope, ra) {\r\n  var Display = { //Display controller\r\n\r\n    initialize: function() {\r\n\t\t\t$(\"#start-session\").click(function () {\r\n\t\t\t\t$(\"#start-session\").attr(\"disabled\", \"disabled\");\r\n\t\t\t\tra.trigger(\"start_session\");\r\n\t\t\t});\r\n\r\n\t\t\tra.on(\"start_session\", function() {\r\n\t\t\t\t$(\"#start-session\").attr(\"disabled\", \"disabled\");\r\n\t\t\t\t$(\"#pause-session\").removeAttr(\"disabled\");\r\n\t\t\t});\r\n\r\n\t\t\t$(\"#reset-session\").click(function () {\r\n\t\t\t\tra.reset();\r\n\t\t\t});\r\n\r\n\t\t\t$(\"#pause-session\").click(function () {\r\n\t\t\t\t$(\"#pause-session\").attr(\"disabled\", \"disabled\");\r\n\t\t\t\tra.trigger(\"pause\");\r\n\t\t\t});\r\n\t\t\tra.on(\"pause\", function() {\r\n\t\t\t\t$(\"#pause-session\").attr(\"disabled\", \"disabled\");\r\n\t\t\t});\r\n\r\n\t\t\t$(\"#resume-session\").click(function () {\r\n\t\t\t\t$(\"#resume-session\").attr(\"disabled\", \"disabled\");\r\n\t\t\t\tra.trigger(\"resume\");\r\n\t\t\t});\r\n\t\t\tra.on(\"resume\", function() {\r\n\t\t\t\t$(\"#resume-session\").attr(\"disabled\", \"disabled\");\r\n\t\t\t\t$(\"#pause-session\").removeAttr(\"disabled\");\r\n\t\t\t});\r\n\r\n\t\t\tra.on_subject_paused(function(userId) {\r\n\t\t\t\t$(\"#pause-session\").attr(\"disabled\", \"disabled\");\r\n\t\t\t\t$(\"tr.subject-\" + userId).addClass(\"warning\"); //Display current period for each user\r\n\t\t\t\t$(\"tr.subject-\" + userId + \" :nth-child(4)\").text(\"Paused\"); //Display current period for each user\r\n\t\t\t});\r\n\r\n\t\t\tra.on_all_paused(function() {\r\n\t\t\t\t$(\"#resume-session\").removeAttr(\"disabled\");\r\n\t\t\t});\r\n\r\n\t\t\tra.on_subject_resumed(function(user) {\r\n\t\t\t\t$(\"tr.subject-\" + user).removeClass(\"warning\"); //Display current period for each user\r\n\t\t\t\t$(\"tr.subject-\" + user + \" :nth-child(4)\").text(\"\"); //Display current period for each user\r\n\t\t\t});\r\n\r\n\t\t\t$(\"#archive\").click(function () {\r\n\t\t\t\tvar r = confirm(\"Are you sure you want to archive this session?\");\r\n\t\t\t\tif(r == true) {\r\n\t\t\t\t\tra.delete_session();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tra.on_router_connected(function(connected) { //Display router connection status\r\n\t\t\t\tvar status = $(\"#router-status\");\r\n\t\t\t\tif (connected) {\r\n\t\t\t\t\tstatus.text(\"Router Connected\");\r\n\t\t\t\t\tstatus.removeClass(\"badge-important\");\r\n\t\t\t\t\tstatus.addClass(\"badge-success\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstatus.text(\"Router Disconnected\");\r\n\t\t\t\t\tstatus.removeClass(\"badge-success\");\r\n\t\t\t\t\tstatus.addClass(\"badge-important\");\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tra.on_set_period(function(user, period) {\r\n\t\t\t\t$(\"tr.subject-\" + user + \" :nth-child(3)\").text(period); //Display current period for each user\r\n\t\t\t});\r\n\r\n\t\t\tra.on_set_group(function(user, group) {\r\n\t\t\t\t$(\"tr.subject-\" + user + \" :nth-child(2)\").text(group); //Display group for each user\r\n\t\t\t});\r\n\r\n\t\t\tra.on_register(function(user) { //Add a row to the table to each user\r\n\t\t\t\t$(\"#subject-list\").empty();\r\n\t\t\t\tfor(var i = 0, l = ra.subjects.length; i < l; i++) {\r\n\t\t\t\t\t$(\"#subject-list\").append($(\"<tr>\").addClass(\"subject-\" + ra.subjects[i].user_id).append(\r\n\t\t\t\t\t\t$(\"<td>\").text(ra.subjects[i].user_id).after(\r\n\t\t\t\t\t\t\t$(\"<td>\").text(0).after(\r\n\t\t\t\t\t\t\t\t$(\"<td>\").text(0).after(\r\n\t\t\t\t\t\t\t\t\t$(\"<td>\").text(\"\"))))));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tra.on_set_config(function(config) { //Display the config file\r\n\t\t\t\t$(\"table.config\").empty();\r\n\t\t\t\tvar a = $.csv.toArrays(config);\r\n\t\t\t\tfor (var i = 0; i < a.length; i++) {\r\n\t\t\t\t\tvar row = a[i];\r\n\t\t\t\t\tvar tr = $(\"<tr>\");\r\n\t\t\t\t\tfor (var j = 0; j < row.length; j++) {\r\n\t\t\t\t\t\tvar cell = row[j];\r\n\t\t\t\t\t\tvar td = $((i == 0 ? \"<th>\" : \"<td>\")).text(cell);\r\n\t\t\t\t\t\ttr.append(td);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$(\"table.config\").append(tr);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\r\n\tvar resetGroups = function() {\r\n\t\tvar config = ra.get_config(1, 0);\r\n\t\tfor (var i = 0; i < ra.subjects.length; i++) { //set all subjects to group 1 (this is so that matching can be changed per period)\r\n\t\t\tif($.isArray(config.groups)) {\r\n\t\t\t\tfor(var groupId = 0; groupId < config.groups.length; groupId++) {\r\n\t\t\t\t\tif($.isArray(config.groups[groupId])) {\r\n\t\t\t\t\t\tif(config.groups[groupId].indexOf(parseInt(ra.subjects[i].user_id)) > -1) { //Nested group array\r\n\t\t\t\t\t\t\tra.set_group(groupId + 1, ra.subjects[i].user_id);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tra.set_group(1, ra.subjects[i].user_id);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tra.set_group(1, ra.subjects[i].user_id);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tDisplay.initialize();\r\n\r\n\tra.on_load(function () {\r\n\t\tresetGroups(); //Assign groups to users\r\n\t});\r\n\r\n\tra.on_register(function(user) { //Add a row to the table to each user\r\n\t\tresetGroups();\r\n\t});\r\n\r\n\tra.on(\"start_session\", function() {\r\n\t\tra.start_session();\r\n\t});\r\n\r\n\tra.on(\"pause\", function() {\r\n\t\tra.pause();\r\n\t});\r\n\r\n\tra.on(\"resume\", function() {\r\n\t\tra.resume();\r\n\t});\r\n\r\n}]);\r\n", "rt_js": ""}}, {"pk": 4, "model": "expecon.page", "fields": {"experiment": 2, "html": "{% load verbatim %}\r\n<!DOCTYPE HTML>\r\n<html ng-app=\"Redwood\">\r\n<head>\r\n  <title>Wait</title>\r\n  <script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/lib/jquery/jquery.min.js\"></script>\r\n  <script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/lib/bootstrap/bootstrap-3.1.1.min.js\"></script>\r\n  <script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/lib/angular/angular-1.2.16.js\"></script>\r\n  <script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/redwoodCore.js\"></script>\r\n\t<script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/redwoodHelpers.js\"></script>\r\n\t<script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/redwoodSubject.js\"></script>\r\n\t<link type=\"text/css\" rel=\"stylesheet\" href=\"{{ STATIC_URL }}framework/css/bootstrap-3.1.1.min.css\"></link>\r\n  <script type=\"text/javascript\">\r\n\t\tvar IMAGE_URL = \"{{ STATIC_URL }}/img/Ultimatum\";\r\n\t\t{{ js }}\r\n\t</script>\r\n\t<style type=\"text/css\">\r\n\t\t{{ css }}\r\n\t</style>\r\n</head>\r\n{% verbatim %}\r\n<body ng-controller=\"SubjectCtrl\">\r\n\t\r\n\t<div class=\"navbar navbar-fixed-top container\">\r\n  <div class=\"navbar navbar-default\" style=\"margin-bottom: 0;\">\r\n\t\t<div class=\"navbar-brand\" href=\"#\">Economics Experiment</div>\r\n\t\t<ul class=\"nav navbar-nav\">\r\n\t\t\t<li class=\"active\">\r\n\t\t\t\t<a>User ID: <span>{{$root.user_id}}</span></a>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t</div>\r\n</div>\r\n\t\r\n\t<div class=\"container\">\r\n\t\t<div class=\"row\">\r\n\t\t\t<div class=\"col-lg-12\">\r\n\t\t\t\tPlease wait for experiment to start...\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</body>\r\n{% endverbatim %}\r\n</html>\r\n", "name": "Wait", "css": "body {\r\n  padding-top: 60px;\r\n}", "js": "Redwood.controller(\"SubjectCtrl\", [\"$rootScope\", \"$scope\", \"RedwoodSubject\", function($rootScope, $scope, rs) {\r\n  rs.on_load(function() { //called once the page has loaded for a new sub period\r\n    rs.next_period();\r\n\t});\r\n}]);"}}, {"pk": 5, "model": "expecon.page", "fields": {"experiment": 2, "html": "{% load verbatim %}\r\n<html ng-app=\"Redwood\">\r\n<head>\r\n  <title>Start</title>\r\n  <script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/lib/jquery/jquery.min.js\"></script>\r\n  <script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/lib/flot/jquery.flot.js\"></script>\r\n  <script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/lib/flot/jquery.flot.dashes.js\"></script>\r\n  <script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/lib/bootstrap/bootstrap-3.1.1.min.js\"></script>\r\n  <script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/lib/angular/angular-1.2.16.js\"></script>\r\n  <script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/lib/random.js\"></script>\r\n  <script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/redwoodCore.js\"></script>\r\n  <script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/redwoodHelpers.js\"></script>\r\n\t<script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/redwoodSubject.js\"></script>\r\n\t<link type=\"text/css\" rel=\"stylesheet\" href=\"{{ STATIC_URL }}framework/css/bootstrap-3.1.1.min.css\"></link>\r\n\t<script type=\"text/javascript\">\r\n\t\tvar IMAGE_URL = \"{{ STATIC_URL }}/img/Discrete Matrix\";\r\n\t\t{{ js }}\r\n\t</script>\r\n\t<style type=\"text/css\">\r\n\t\t{{ css }}\r\n\t</style>\r\n</head>\r\n\r\n{% verbatim %}\r\n<body ng-controller=\"SubjectCtrl\">\r\n\t\r\n\t<div class=\"navbar navbar-fixed-top container\">\r\n  <div class=\"navbar navbar-default\" style=\"margin-bottom: 0;\">\r\n\t\t<div class=\"navbar-brand\" href=\"#\">Economics Experiment</div>\r\n\t\t<ul class=\"nav navbar-nav\">\r\n\t\t\t<li class=\"active\">\r\n\t\t\t\t<a>User ID: <span>{{$root.user_id}}</span></a>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t\t<div class=\"navbar-right\">\r\n\t\t\t<div class=\"navbar-text\">Period: <span>{{$root.period}}</span></div>\r\n\t\t\t<div class=\"navbar-text\">Total Reward: <span>{{$root.totalPoints | number:2}}</span></div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\t\r\n\t\r\n\t<div class=\"container\">\r\n\t\t<div class=\"row\">\r\n\t\t\t<div class=\"col-lg-9\" style=\"text-align:center;\">\r\n\t\t\t\t<div id=\"plot-text\" style=\"display:inline-block;\"></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div class=\"row\">\r\n\t\t\t<div class=\"col-lg-9\">\r\n\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t<div class=\"col-lg-9\">\r\n\t\t\t\t\t\t<div id=\"plot\" style=\"height:420px;\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div id=\"input-container\" class=\"col-lg-9\">\r\n\t\t\t\t\t\t<button id=\"ready-button\" class=\"btn btn-success\" disabled=\"disabled\">Ready</button>\r\n\t\t\t\t\t\t<button id=\"next-period-button\" class=\"btn\" style=\"display:none;\" data-next-period data-auto=\"5\">Next Period</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"col-lg-3\">\r\n\t\t\t\t<div class=\"well sidebar-nav\">\r\n\t\t\t\t\t<ul class=\"nav nav-list\">\r\n\t\t\t\t\t\t<li>Period:<span class=\"pull-right\">{{$root.period}}</span></li>\r\n\t\t\t\t\t\t<li>Withdrawals:<span class=\"pull-right\">{{$root.periodPoints}}</span></li>\r\n\t\t\t\t\t\t<li>&nbsp</li>\r\n\t\t\t\t\t\t<li>Total Withdrawals:<span class=\"pull-right\">{{$root.totalPoints}}</span></li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div id=\"param-display\" class=\"well sidebar-nav\" style=\"display:none;\">\r\n\t\t\t\t\t<ul class=\"nav nav-list\">\r\n\t\t\t\t\t\t<li>Change Size:<span id=\"up_size\" class=\"pull-right\"></span></li>\r\n\t\t\t\t\t\t<li>Prob(up):<span id=\"p_up\" class=\"pull-right\"></span></li>\r\n\t\t\t\t\t\t<li>Prob(end):<span id=\"p_end\" class=\"pull-right\"></span></li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div class=\"row\">\r\n\t\t\t<hr style=\"margin-top:20px;\"/>\r\n\t\t\t<div class=\"col-lg-12\" id=\"footer\">\r\n\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t<div id=\"group-info-row\" class=\"col-lg-4\"></div>\r\n\t\t\t\t\t<div class=\"col-lg-2\"></div>\r\n\t\t\t\t\t<div id=\"statistical-data-row\" class=\"col-lg-6\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</body>\r\n{% endverbatim %}\r\n</html>\r\n", "name": "Start", "css": "body {\r\n  padding-top: 60px;\r\n}\r\n\r\n.no-transition:hover{\r\n   -webkit-transition: none;\r\n   background-position: 0 0;\r\n }\r\n \r\n .text-error {\r\n   color: #a94442;\r\n }", "js": "Redwood.controller(\"SubjectCtrl\", [\"$rootScope\", \"$scope\", \"RedwoodSubject\", function($rootScope, $scope, rs) {\r\n  \r\n  var Display = { //Display controller\r\n    initialize: function() {\r\n    \tDisplay.mousedown = false;\r\n  \t\t$(\"#plot\").bind(\"plothover\", function (event, pos, item) { //To drag barrier when mouse button is down\r\n  \t\t\tif (Display.mousedown && !state.ready) {\r\n  \t\t\t\tif(rs.config.grid) {\r\n  \t\t\t\t\tstate.periodData.barrier = Math.max(0, Math.round(pos.y / rs.config.grid) * rs.config.grid);\r\n  \t\t\t\t} else {\r\n  \t\t\t\t\tstate.periodData.barrier = Math.max(0, Math.round(pos.y));\r\n  \t\t\t\t}\r\n  \t\t\t}\r\n  \t\t});\r\n  \t\t$(\"#plot\").bind(\"mousedown\", function (event) { //Check if barrier should be moved\r\n  \t\t\tDisplay.mousedown = true;\r\n  \t\t});\r\n  \t\t$(\"#plot\").bind(\"mouseup\", function (event) { //Stop moving barrier\r\n  \t\t\tif(Display.mousedown){\r\n  \t\t\t\tDisplay.mousedown = false;\r\n  \t\t\t\tif(!state.ready && state.periodData.barrier !== undefined)\r\n  \t\t\t\t\trs.trigger(\"barrier\", state.periodData.barrier); //Set barrier at current mouse position\r\n  \t\t\t}\r\n  \t\t});\r\n  \t\t$(\"#plot\").bind(\"mouseout\", function (event) { //Mouse leaving plot area is treated the same as releasing the mouse button - stop moving barrier\r\n  \t\t\tif(Display.mousedown){\r\n  \t\t\t\tDisplay.mousedown = false;\r\n  \t\t\t\tif(!state.ready && state.periodData.barrier !== undefined)\r\n  \t\t\t\t\trs.trigger(\"barrier\", state.periodData.barrier); //Set barrier at current mouse position\r\n  \t\t\t}\r\n  \t\t});\r\n  \t\t$(\"#ready-button\").click(function () {\r\n  \t\t\tif (!state.ready && state.periodData.barrier !== undefined) { //Check that barrier has been set\r\n  \t\t\t\trs.trigger(\"ready\");\r\n  \t\t\t}else{\r\n  \t\t\t\talert(\"Set barrier\");\r\n  \t\t\t}\r\n  \t\t});\r\n  \t\t\r\n  \t\trs.on(\"ready\", function(value){\r\n  \t\t\t$(\"#ready-button\").attr(\"disabled\", \"disabled\");\r\n  \t\t});\r\n  \t\t\r\n  \t\tif(rs.config.show_params) {\r\n  \t\t\t$(\"#p_up\").text((state.p_up * 100).toFixed(2) + \"%\");\r\n  \t\t\t$(\"#up_size\").text(state.up_size);\r\n  \t\t\t$(\"#p_end\").text((state.p_end * 100).toFixed(2) + \"%\");\r\n  \t\t\t$(\"#param-display\").show();\r\n  \t\t}\r\n  \t\t\r\n  \t\tDisplay.flashReadyButton();\r\n  \t},\r\n  \t\r\n  \treplot: function() { //Redraw plot area\r\n  \t\tvar account = state.account;\r\n  \t\tvar last_x = account[account.length - 1][0];\r\n  \t\tvar last_y = account[account.length - 1][1];\r\n  \t\tif (state.periodData.barrier > state.ymax && !rs.config.fix_y) { //Adjust height of plot to fit barrier\r\n  \t\t\tstate.ymax = state.periodData.barrier + 10;\r\n  \t\t}\r\n  \t\tvar xrange = 200;\r\n  \t\tvar opts = {\r\n  \t\t\tgrid: { clickable: true, hoverable: true },\r\n  \t\t\txaxis: { tickLength: 0, min: -xrange / 2, max: xrange / 2 },\r\n  \t\t\tyaxis: { tickLength: 0, min: 0, max: state.ymax + 10 },\r\n  \t\t\tseries: { shadowSize: 0 }\r\n  \t\t};\r\n  \t\tif (last_x + 20 > opts.xaxis.max) {\r\n  \t\t\topts.xaxis.max = account.length - state.withdrawals.length/3 + 20; //Slide plot to show most recent data\r\n  \t\t}\r\n  \t\topts.xaxis.min = opts.xaxis.max - xrange;\r\n  \t\tvar dataset = [];\r\n  \t\tdataset.push({\r\n  \t\t\tdata: account, //plot account\r\n  \t\t\tlines: { show: true, lineWidth: 1.5 },\r\n  \t\t\tpoints: { show: false },\r\n  \t\t\tcolor: last_y <= 0 ? \"rgb(255,20,0)\" : \"rgb(0,100,255)\",\r\n  \t\t\thoverable: false\r\n  \t\t});\r\n  \t\tdataset.push({ //show dot at front of account line\r\n  \t\t\tdata: [ [last_x, last_y] ],\r\n  \t\t\tlines: { show: false },\r\n  \t\t\tpoints: { show: true, fill: true, radius: 2 },\r\n  \t\t\tcolor: state.periodData.bankrupt ? \"rgb(255,20,0)\" : \"rgb(0,100,255)\",\r\n  \t\t\thoverable: false\r\n  \t\t});\r\n  \t\tdataset.push({ ////show dot at front of account line\r\n  \t\t\tdata: [ [last_x, last_y] ],\r\n  \t\t\tlines: { show: false },\r\n  \t\t\tpoints: { show: true, fill: true, radius: 1 },\r\n  \t\t\tcolor: state.periodData.bankrupt ? \"rgb(255,20,0)\" : \"rgb(0,100,255)\",\r\n  \t\t\thoverable: false\r\n  \t\t});\r\n  \t\tif(rs.period > 1 && !state.ready){ //Display barrier from previous period as reference\r\n  \t\t\tdataset.push({\r\n  \t\t\t\tdata: [\r\n  \t\t\t\t\t[last_x, rs.subject[rs.user_id].get(\"period_data\").barrier],\r\n  \t\t\t\t\t[opts.xaxis.max, rs.subject[rs.user_id].get(\"period_data\").barrier]\r\n  \t\t\t\t],\r\n  \t\t\t\tdashes: { show: true, lineWidth: 1.5 },\r\n  \t\t\t\tcolor: \"grey\",\r\n  \t\t\t\thoverable: false\r\n  \t\t\t});\r\n  \t\t}\r\n  \t\tdataset.push({ //Display barrier as dashed line\r\n  \t\t\tdata: [\r\n  \t\t\t\t[last_x, state.periodData.barrier],\r\n  \t\t\t\t[opts.xaxis.max, state.periodData.barrier]\r\n  \t\t\t],\r\n  \t\t\tdashes: { show: true, lineWidth: 1.5 },\r\n  \t\t\tcolor: \"black\",\r\n  \t\t\thoverable: false\r\n  \t\t});\r\n  \t\tdataset.push({\r\n  \t\t\tdata: state.withdrawals, //Show withdrawals as green vertical lines\r\n  \t\t\tlines: { show: true, lineWidth: 1.5 },\r\n  \t\t\tcolor: \"rgb(36,255,0)\",\r\n  \t\t\thoverable: false\r\n  \t\t});\r\n  \t\tvar withdrawal = last_y - state.periodData.barrier;\r\n  \t\tif (withdrawal > 0) {\r\n  \t\t\tdataset.push({\r\n  \t\t\t\tdata: [\r\n  \t\t\t\t\t[last_x, last_y],\r\n  \t\t\t\t\t[last_x, last_y - withdrawal]\r\n  \t\t\t\t],\r\n  \t\t\t\tlines: { show: true, lineWidth: 1.5 },\r\n  \t\t\t\tcolor: \"rgb(36,255,0)\"\r\n  \t\t\t});\r\n  \t\t}\r\n  \r\n  \t\tfunction draw_text(plot, ctx) { //display barrier and bankrupt text\r\n  \t\t\tvar o = plot.pointOffset({ x: last_x, y: state.periodData.barrier });\r\n  \t\t\tvar s = state.periodData.barrier;\r\n  \t\t\tvar w = ctx.measureText(s).width;\r\n  \t\t\tvar x = o.left + 5;\r\n  \t\t\tvar y = o.top - 5;\r\n  \t\t\tif (y < 10) {\r\n  \t\t\t\ty = o.top + 10;\r\n  \t\t\t}\r\n  \t\t\tctx.fillText(s, x, y);\r\n  \t\t\tif(state.withdrawals.length > 2) {// && last_x - state.withdrawals[state.withdrawals.length - 2][0] == 0) {\r\n  \t\t\t\tfor(var i = state.withdrawals.length - 2; i > 0; i -= 3) {\r\n  \t\t\t\t\tif(last_x - state.withdrawals[i][0] > 3) {\r\n  \t\t\t\t\t\tcontinue;\r\n  \t\t\t\t\t}\r\n  \t\t\t\t\ts = \"$\";\r\n  \t\t\t\t\tvar o = plot.pointOffset({ x: state.withdrawals[i][0], y: state.withdrawals[i][1] });\r\n  \t\t\t\t\tvar x = o.left - 3;\r\n  \t\t\t\t\tvar y = o.top - 5 - (last_x - state.withdrawals[i][0]) * 3;\r\n  \t\t\t\t\tctx.fillStyle = \"green\";\r\n  \t\t\t\t\tctx.fillText(s, x, y );\r\n  \t\t\t\t}\r\n  \t\t\t}\r\n  \t\t\tvar withdrawal = last_y - state.periodData.barrier;\r\n  \t\t\tif(withdrawal > 0 && last_x == 0) {\r\n  \t\t\t\ts = \"$\";\r\n  \t\t\t\tvar o = plot.pointOffset({ x: 0, y: rs.config.initial });\r\n  \t\t\t\tvar x = o.left - 3;\r\n  \t\t\t\tvar y = o.top - 5;\r\n  \t\t\t\tctx.fillStyle = \"green\";\r\n  \t\t\t\tctx.fillText(s, x, y );\r\n  \t\t\t}\r\n  \t\t\tif(rs.period > 1 && !state.ready){\r\n  \t\t\t\tctx.fillStyle = \"grey\";\r\n  \t\t\t\tvar o = plot.pointOffset({\r\n  \t\t\t\t\tx: last_x,\r\n  \t\t\t\t\ty: rs.subject[rs.user_id].get(\"period_data\").barrier\r\n  \t\t\t\t});\r\n  \t\t\t\tvar s = \"previous barrier\";\r\n  \t\t\t\tvar m = ctx.measureText(s);\r\n  \t\t\t\tctx.fillText(s, o.left - m.width - 5, o.top + 2);\r\n  \t\t\t}\r\n  \t\t\tif (last_y <= 0) {\r\n  \t\t\t\t$(\"#plot-text\").html(\"<span class='text-error'>Bankrupt</span>\");\r\n  \t\t\t} else if (!state.ready) {\r\n  \t\t\t\t$(\"#plot-text\").html(\"<span class='text-success'>Set Barrier</span>\");\r\n  \t\t\t} else {\r\n  \t\t\t\t$(\"#plot-text\").html(\"&nbsp\");\r\n  \t\t\t}\r\n  \t\t}\r\n  \t\topts.hooks = { draw: [draw_text] };\r\n  \t\t\r\n  \t\t$.plot(\"#plot\", dataset, opts);\r\n  \t},\r\n  \t\r\n  \tdisplayData: function(isPrevious) { //Display the data for the current or previous period\r\n  \t\tDisplay.clearGroupData();\r\n  \t\tif(isPrevious){\r\n  \t\t\t$(\"#group-info-row\").append(\"<p>Previous period results:</p>\");\r\n  \t\t} else {\r\n  \t\t\t$(\"#group-info-row\").append(\"<p>Current period:</p>\");\r\n  \t\t}\r\n  \t\tvar table = \"<table class='table table-bordered table-condensed'>\" + \r\n  \t\t\t\t\t\"\t<tr>\" + \r\n  \t\t\t\t\t\"\t\t<th>Participant</th>\" +\r\n  \t\t\t\t\t\"\t\t<th>Barrier</th>\" +\r\n  \t\t\t\t\t\"\t\t<th>Withdrawals</th>\" +\r\n  \t\t\t\t\t\"\t\t<th></th>\" +\r\n  \t\t\t\t\t\"\t</tr>\";\r\n  \t\tvar member = isPrevious ? rs.subject[rs.user_id].get(\"period_data\") : state.periodData;\r\n  \t\ttable = table +\r\n  \t\t\t\t\"\t<tr\" + \" class='info'\" + \">\" +\r\n  \t\t\t\t\"\t\t<td>\" + rs.subject[rs.user_id].alias + \"</td>\" +\r\n  \t\t\t\t\"\t\t<td>\" + (angular.isNullOrUndefined(member.barrier) ? \"?\" : member.barrier) + \"</td>\" +\r\n  \t\t\t\t\"\t\t<td>\" + member.points + \"</td>\" +\r\n  \t\t\t\t\"\t\t<td class='text-error' style='width:6em;'>\" + (member.bankrupt ? \"bankrupt\" : \"\") + \"</td>\" +\r\n  \t\t\t\t\"\t</tr>\";\r\n  \t\tif(rs.config.show_others) {\r\n  \t\t\tfor(var user_id in rs.subject){\r\n  \t\t\t\tvar subject = rs.subject[user_id];\r\n  \t\t\t\tif(user_id !== rs.user_id) {\r\n  \t\t\t\t\tvar member = isPrevious ? subject.get(\"period_data\") : {barrier: subject.get(\"barrier\"), points: subject.points, bankrupt: subject.get(\"bankrupt\")};\r\n  \t\t\t\t\ttable = table +\r\n  \t\t\t\t\t\t\t\"\t<tr>\" +\r\n  \t\t\t\t\t\t\t\"\t\t<td>\" + subject.alias + \"</td>\" +\r\n  \t\t\t\t\t\t\t\"\t\t<td>\" + (angular.isNullOrUndefined(member.barrier) ? \"?\" : member.barrier) + \"</td>\" +\r\n  \t\t\t\t\t\t\t\"\t\t<td>\" + member.points + \"</td>\" +\r\n  \t\t\t\t\t\t\t\"\t\t<td class='text-error' style='width:6em;'>\" + (member.bankrupt ? \"bankrupt\" : \"\") + \"</td>\" +\r\n  \t\t\t\t\t\t\t\"\t</tr>\";\r\n  \t\t\t\t}\r\n  \t\t\t}\r\n  \t\t}\r\n  \t\ttable = table + \"</table>\";\r\n  \t\t$(\"#group-info-row\").append(table);\r\n  \t},\r\n  \t\r\n  \tclearGroupData: function() {\r\n  \t\t$(\"#group-info-row\").empty();\r\n  \t},\r\n  \r\n  \tclearStatisticalData: function() {\r\n  \t\t$(\"#statistical-data-row\").empty();\r\n  \t},\r\n  \r\n  \tdisplayStatisticalData: function() { //Display the statistical data for the group\r\n  \t\tvar data = {\r\n  \t\t\tbarriers: {},\r\n  \t\t\tbankruptcy: {}\r\n  \t\t};\r\n  \t\tfor(var user_id in rs.subject) {\r\n  \t\t\tvar subject = rs.subject[user_id];\r\n  \t\t\tdata.barriers[user_id] = subject.data[\"period_data\"].map(function(d) {\r\n  \t\t\t\treturn d.barrier;\r\n  \t\t\t});\r\n  \t\t\tdata.bankruptcy[user_id] = subject.data[\"period_data\"].map(function(d) {\r\n  \t\t\t\treturn d.bankrupt ? 1 : 0;\r\n  \t\t\t});\r\n  \t\t}\r\n  \t\t\r\n  \t\tif(Object.size(data) > 0){\r\n  \t\t\tDisplay.clearStatisticalData();\r\n  \t\t\t$(\"#statistical-data-row\").append(\"<p>Cumulative data:</p>\");\r\n  \t\t\tvar table = \"<table class='table table-bordered table-condensed'>\" + \r\n  \t\t\t\t\t\t\"\t<tr>\" + \r\n  \t\t\t\t\t\t\"\t\t<th>Participant</td>\" +\r\n  \t\t\t\t\t\t\"\t\t<th>Ave. Barrier</td>\" +\r\n  \t\t\t\t\t\t\"\t\t<th>Total Withdrawals</td>\" +\r\n  \t\t\t\t\t\t\"\t\t<th>Bankruptcy Rate</td>\" +\r\n  \t\t\t\t\t\t\"\t</tr>\";\r\n  \t\t\t\r\n  \t\t\ttable = table + \"<tr class='info'>\";\r\n  \t\t\ttable = table + \"\t<td>\" + rs.subject[rs.user_id].alias + \"</td>\";\r\n  \t\t\ttable = table + \"\t<td>\" + Math.round(data.barriers[rs.user_id].sum() / data.barriers[rs.user_id].length) + \"</td>\";\r\n  \t\t\ttable = table + \"\t<td>\" + rs.accumulated_points + \"</td>\";\r\n  \t\t\ttable = table + \"\t<td>\" + Math.round(data.bankruptcy[rs.user_id].sum() * 100 / data.bankruptcy[rs.user_id].length) + \"%</td>\";\r\n  \t\t\ttable = table + \"</tr>\";\r\n  \t\t\t\r\n  \t\t\tif(rs.config.show_others) {\r\n  \t\t\t\tfor(var userId in data.barriers){\r\n  \t\t\t\t\tif(userId !== rs.user_id){\r\n  \t\t\t\t\t\ttable = table + \"<tr>\";\r\n  \t\t\t\t\t\ttable = table + \"\t<td>\" + rs.subject[userId].alias + \"</td>\";\r\n  \t\t\t\t\t\ttable = table + \"\t<td>\" + Math.round(data.barriers[userId].sum() / data.barriers[userId].length) + \"</td>\";\r\n  \t\t\t\t\t\ttable = table + \"\t<td>\" + rs.subject[userId].accumulated_points + \"</td>\";\r\n  \t\t\t\t\t\ttable = table + \"\t<td>\" + Math.round(data.bankruptcy[userId].sum() * 100 / data.bankruptcy[userId].length) + \"%</td>\";\r\n  \t\t\t\t\t\ttable = table + \"</tr>\";\r\n  \t\t\t\t\t}\r\n  \t\t\t\t}\r\n  \t\t\t}\r\n  \t\t\ttable = table + \"</table>\";\r\n  \t\t\t$(\"#statistical-data-row\").append(table);\r\n  \t\t}\r\n  \t},\r\n  \t\r\n  \tflashReadyButton: function() {\r\n  \t\tvar faded = false;\r\n  \t\tvar mouseOver = false;\r\n  \t\tvar temp = $(\"#ready-button\").css(\"background-image\");\r\n  \t\tsetInterval(function(){\r\n  \t\t\tif(!mouseOver && !state.ready) {\r\n  \t\t\t\tif(faded) {\r\n  \t\t\t\t\t$(\"#ready-button\").css(\"background-image\", temp);\r\n  \t\t\t\t} else {\r\n  \t\t\t\t\t$(\"#ready-button\").css(\"background-image\", \"linear-gradient(rgb(142, 195, 142), rgb(142, 195, 142))\");\r\n  \t\t\t\t}\r\n  \t\t\t\tfaded = !faded;\r\n  \t\t\t}\r\n  \t\t}, 500);\r\n  \t\t$(\"#ready-button\").on(\"mouseover\", function (event) {\r\n  \t\t\tmouseOver = true;\r\n  \t\t\t$(\"#ready-button\").css(\"background-image\", temp);\r\n  \t\t});\r\n  \t\t$(\"#ready-button\").on(\"mouseout\", function (event) {\r\n  \t\t\tmouseOver = false;\r\n  \t\t});\r\n  \t}\r\n  };\r\n\r\n  //Types\r\n  var Direction = {UP: true, DOWN: false};\r\n  \r\n  //state\r\n  var state = {\r\n  \taccount: [],\r\n  \tymax: 0,\r\n  \twithdrawals: [],\r\n  \tprevtotal: 0,\r\n  \ttickDirections: undefined,\r\n  \tperiodData: {},\r\n  \tpreviousPeriodData: {},\r\n  \tstatisticalData: undefined,\r\n  \tticker: undefined,\r\n  \tready: false\r\n  };\r\n  \r\n\r\n\tvar processTick = function(value) {\r\n\t\tif (value.withdrawal > 0) {\r\n\t\t\trs.add_points(value.withdrawal);\r\n\t\t}\r\n\t\tvar x = value.x;\r\n\t\tvar y = value.y;\r\n\t\tvar withdrawal = value.withdrawal;\r\n\t\tstate.account.push([x, y + withdrawal]);\r\n\t\tif(!rs.config.fix_y) {\r\n\t\t\tstate.ymax = y > state.ymax ? y : state.ymax;\r\n\t\t}\r\n\t\tif (withdrawal !== 0) {\r\n\t\t\tstate.account.push([x, y]); //Update account\r\n\t\t\tstate.withdrawals.push([x, state.periodData.barrier]);\r\n\t\t\tstate.withdrawals.push([x, state.periodData.barrier + withdrawal]);\r\n\t\t\tstate.withdrawals.push(null);\r\n\t\t}\r\n\t\tif(y <= 0 && !state.periodData.bankrupt){ //Player is bankrupt if the account reaches 0\r\n\t\t\tstate.periodData.bankrupt = true;\r\n\t\t\trs.trigger(\"bankrupt\", true);\r\n\t\t}\r\n\t};\r\n\r\n\trs.on(\"tick\", function (value) { //Update state based on tick values\r\n\t\tprocessTick(value);\r\n\t});\r\n\t\r\n\trs.on(\"barrier\", function (value) {\r\n\t\tstate.periodData.barrier = value; //Save current barrier\r\n\t});\r\n\t\r\n\trs.on(\"bankrupt\", function(value){\r\n\t\tstate.periodData.bankrupt = true; //Save bankruptcy state\r\n\t});\r\n\t\r\n\trs.on_points_changed(function(points) {\r\n\t\tstate.periodData.points = points; //Save current points (for use in previous period data display\r\n\t});\r\n\t\r\n\trs.on_load(function () {\r\n\t\t//Setup aliases\r\n\t\trs.subject[rs.user_id].alias = 'A (You)';\r\n\t\tvar subjects = rs.subjects.filter(function(subject) {\r\n\t\t\treturn subject.user_id !== rs.user_id;\r\n\t\t});\r\n\t\tvar alias = 'B';\r\n\t\tfor(var i = 0, l = subjects.length; i < l; i++) {\r\n\t\t\tsubjects[i].alias = alias;\r\n\t\t\talias = String.fromCharCode(alias.charCodeAt(0) + 1);\r\n\t\t}\r\n\t\t\r\n\t\t//Initialize state\r\n\t\tif($.isArray(rs.config.ticks)) {\r\n\t\t\tstate.ticks = rs.config.ticks[rs.user_id - 1];\r\n\t\t} else {\r\n\t\t\tstate.ticks = rs.config.ticks;\r\n\t\t}\r\n\t\t\r\n\t\tif($.isArray(rs.config.p_up)) {\r\n\t\t\tstate.p_up = rs.config.p_up[rs.user_id - 1];\r\n\t\t} else {\r\n\t\t\tstate.p_up = rs.config.p_up;\r\n\t\t}\r\n\t\t\r\n\t\tif($.isArray(rs.config.up_size)) {\r\n\t\t\tstate.up_size = rs.config.up_size[rs.user_id - 1];\r\n\t\t} else {\r\n\t\t\tstate.up_size = rs.config.up_size;\r\n\t\t}\r\n\t\t\r\n\t\tif($.isArray(rs.config.p_end)) {\r\n\t\t\tstate.p_end = rs.config.p_end[rs.user_id - 1];\r\n\t\t} else {\r\n\t\t\tstate.p_end = rs.config.p_end;\r\n\t\t}\r\n\t\t\r\n\t\tstate.account = [[0, rs.config.initial]];\r\n\t\tstate.withdrawals = [];\r\n\t\tstate.ymax = rs.config.initial_ymax;\r\n\t\t\r\n\t\t//Initialize periodData\r\n\t\tstate.periodData = {\r\n\t\t\tbarrier: undefined,\r\n\t\t\tbankrupt: false,\r\n\t\t\tpoints: 0\r\n\t\t};\r\n\t\t\r\n\t\tif(rs.period > 1) {\r\n\t\t\tsetTimeout(function() {\r\n\t\t\t\trs.trigger(\"barrier\", rs.subject[rs.user_id].get(\"period_data\").barrier);\r\n\t\t\t\tif(rs.config.show_historical) {\r\n\t\t\t\t\tDisplay.displayStatisticalData();\r\n\t\t\t\t}\r\n\t\t\t\t$(\"#ready-button\").attr(\"disabled\", null);\r\n\t\t\t}, 0);\r\n\t\t} else {\r\n\t\t\t$(\"#ready-button\").attr(\"disabled\", null);\r\n\t\t}\r\n\t\t\r\n\t\tDisplay.initialize();\r\n\t\t\r\n\t\trs.timeout(function() { //Start the simulation when the engine is in real-time\r\n\t\t\tsetInterval(function () {\r\n\t\t\t\tDisplay.replot();\r\n\t\t\t\tif(state.tickDirections !== undefined) { //Simulation has started so show current period data\r\n\t\t\t\t\tDisplay.displayData(false);\r\n\t\t\t\t} else if(rs.period > 1 && state.tickDirections === undefined) { //Simulation has not yet started so show previous period data\r\n\t\t\t\t\tDisplay.displayData(true);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tDisplay.clearGroupData();\r\n\t\t\t\t}\r\n\t\t\t}, 50);\r\n\t\t});\r\n\t});\r\n\t\r\n\trs.on(\"ready\", function(value){\r\n\t\tstate.ready = true;\r\n\t\trs.gate('ready', function() { //Once all users have reached this point\r\n\t\t\tif(rs.user_id == rs.subjects[0].user_id || !rs.config.same_draws){ //Decide whether to generate own draws\r\n\t\t\t\tstate.tickDirections = generateTickDirections();\r\n\t\t\t\trs.send(\"tick_directions\", state.tickDirections);\r\n\t\t\t\tvar withdrawal = Math.max(rs.config.initial - state.periodData.barrier, 0);\r\n\t\t\t\tprocessTick({ x: 0, y: rs.config.initial - withdrawal, withdrawal: withdrawal });\r\n\t\t\t\trs.timeout(function() {\r\n\t\t\t\t\tstate.ticker = start_ticker();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\t\r\n\trs.recv(\"tick_directions\", function(sender, value) {\r\n\t\tif(rs.config.same_draws){ //Only accept partner's tick sequence if config specifies using same draws\r\n\t\t\tstate.tickDirections = [];\r\n\t\t\tfor(var i = 0; i < value.length; i++){ //Save draws\r\n\t\t\t\tstate.tickDirections.push(value[i]);\r\n\t\t\t}\r\n\t\t\tvar withdrawal = Math.max(rs.config.initial - state.periodData.barrier, 0);\r\n\t\t\tprocessTick({ x: 0, y: rs.config.initial - withdrawal, withdrawal: withdrawal });\r\n\t\t\trs.timeout(function() { //Start experiment\r\n\t\t\t\tstate.ticker = start_ticker();\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\t\r\n\trs.on(\"simulation_complete\", function (value) { //Simulation is complete\r\n\t\tstate.simulation_complete = true;\r\n    rs.gate('simulation_complete', function() { //When all user's reach this point\r\n\t\t\tif($.isArray(rs.config.earnings_abc[0])) {\r\n\t\t\t\tvar a = rs.config.earnings_abc[rs.user_id - 1][0];\r\n\t\t\t\tvar b = rs.config.earnings_abc[rs.user_id - 1][1];\r\n\t\t\t\tvar c = rs.config.earnings_abc[rs.user_id - 1][2];\r\n\t\t\t} else {\r\n\t\t\t\tvar a = rs.config.earnings_abc[0];\r\n\t\t\t\tvar b = rs.config.earnings_abc[1];\r\n\t\t\t\tvar c = rs.config.earnings_abc[2];\r\n\t\t\t}\r\n\t\t\tvar earnings = a*Math.max(Math.pow(rs.points, b) - c, 0); //a*max( (withdrawals^b)-c, 0)\r\n\t\t\tvar points_by_period = rs.subject[rs.user_id].get(\"points_by_period\");\r\n\t\t\tvar total_earnings = (points_by_period && points_by_period.total_earnings ? points_by_period.total_earnings + earnings: earnings);\r\n\t\t\trs.set(\"points_by_period\", {period: rs.period, points: rs.points, earnings: earnings, total_earnings: total_earnings});\r\n\t\t\trs.send(\"__set_show_up_fee__\", {show_up_fee: total_earnings});\r\n\t\t\trs.set(\"period_data\", state.periodData); //Save period data to be retrieved next period\r\n\t\t\trs.next_period(5); //Advance period after 5 second delay\r\n\t\t});\r\n\t});\r\n\t\r\n\tvar start_ticker = function() { \r\n\t\tvar curr_x = state.account[state.account.length - 1][0];\r\n\t\tvar curr_y = state.account[state.account.length - 1][1];\r\n\t\t\r\n\t\tif (curr_x >= state.ticks || (state.periodData.bankrupt && rs.config.end_early)) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t\r\n\t\tvar ticker = setInterval(function () {\r\n\t\t\t\r\n\t\t\tvar tick = run_ticker(curr_x, curr_y);\r\n\t\t\tcurr_x++;\r\n\t\t\tcurr_y = tick.y;\r\n\t\t\t\r\n\t\t\trs.trigger(\"tick\", { x: curr_x, y: tick.y, withdrawal: tick.withdrawal });\r\n\t\t\t\r\n\t\t\tif (curr_x >= state.ticks || (state.periodData.bankrupt && rs.config.end_early)) {\r\n\t\t\t\trs.trigger(\"simulation_complete\");\r\n\t\t\t\tclearInterval(ticker);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}, 1000 / rs.config.ticks_per_second);\r\n\t\treturn ticker;\r\n\t};\r\n\r\n\tvar generateTickDirections = function() {\r\n\t\tvar tickDirections = [];\r\n\t\tvar rand = new Random();\r\n\t\tfor(var i = 0; i < state.ticks; i++){\r\n\t\t\ttickDirections[i] = (rand.random() <= state.p_up ? Direction.UP : Direction.DOWN);\r\n\t\t}\r\n\t\treturn tickDirections;\r\n\t};\r\n\r\n\tvar run_ticker = function(curr_x, curr_y) {\r\n\t\tvar next_y = curr_y;\r\n\t\tvar withdrawal = 0;\r\n\t\tvar direction = state.tickDirections[curr_x];\r\n\t\tif (curr_y > 0) {\r\n\t\t\t\r\n\t\t\tif (direction === Direction.UP) {\r\n\t\t\t\tnext_y += state.up_size;\r\n\t\t\t} else {\r\n\t\t\t\tnext_y -= state.up_size;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (next_y < 0) {\r\n\t\t\t\tnext_y = 0;\r\n\t\t\t}\r\n\t\t\tif (next_y > state.periodData.barrier) {\r\n\t\t\t\twithdrawal += next_y - state.periodData.barrier;\r\n\t\t\t\tnext_y = state.periodData.barrier;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tnext_y = 0;\r\n\t\t}\r\n\t\treturn { y: next_y, direction: direction, withdrawal: withdrawal };\r\n\t};\r\n  \r\n}]);\r\n"}}, {"pk": 6, "model": "expecon.page", "fields": {"experiment": 2, "html": "{% load verbatim %}\r\n<!DOCTYPE HTML>\r\n<html ng-app=\"Redwood\">\r\n<head>\r\n  <title>Finish</title>\r\n  <script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/lib/jquery/jquery.min.js\"></script>\r\n  <script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/lib/bootstrap/bootstrap-3.1.1.min.js\"></script>\r\n  <script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/lib/angular/angular-1.2.16.js\"></script>\r\n  <script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/redwoodCore.js\"></script>\r\n\t<script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/redwoodHelpers.js\"></script>\r\n\t<script type=\"text/javascript\" src=\"{{ STATIC_URL }}framework/js/redwoodSubject.js\"></script>\r\n\t<link type=\"text/css\" rel=\"stylesheet\" href=\"{{ STATIC_URL }}framework/css/bootstrap-3.1.1.min.css\"></link>\r\n  <script type=\"text/javascript\">\r\n\t\t{{ js }}\r\n\t</script>\r\n\t<style type=\"text/css\">\r\n\t\t{{ css }}\r\n\t</style>\r\n</head>\r\n{% verbatim %}\r\n<body ng-controller=\"SubjectCtrl\">\r\n\t\r\n\t<div class=\"navbar navbar-fixed-top container\">\r\n\t\t<div class=\"navbar-inner\">\r\n\t\t\t<div class=\"container-fluid\">\r\n\t\t\t\t<div class=\"brand\" href=\"#\">Economics Experiment</div>\r\n\t\t\t\t<div class=\"nav-collapse collapse\">\r\n\t\t\t\t\t<p class=\"navbar-text pull-right\">\r\n\t\t\t\t\t\tUser ID: <span class=\"navbar-link\">{{$root.user_id}}</span>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t\r\n\t<div class=\"container\">\r\n\t\t<table class=\"table table-bordered table-condensed\">\r\n\t\t\t<thead>\r\n\t\t\t\t<tr><th>Period</th><th>Withdrawals</th><th>Earnings</th></tr>\r\n\t\t\t</thead>\r\n\t\t\t<tbody id=\"results\">\r\n\t\t\t\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t</div>\r\n</body>\r\n{% endverbatim %}\r\n</html>\r\n", "name": "Finish", "css": "body {\r\n  padding-top: 60px;\r\n}", "js": "Redwood.controller(\"SubjectCtrl\", [\"$rootScope\", \"$scope\", \"RedwoodSubject\", function($rootScope, $scope, rs) {\r\n\r\n  var state = {};\r\n\r\n  rs.on_load(function() {\r\n\t\tstate.totalEarnings = 0;\r\n\t\t\r\n\t\tvar points_by_period = rs.subject[rs.user_id].data[\"points_by_period\"];\r\n\t\tfor (var i = 0; i < points_by_period.length; i++) {\r\n\t\t\tstate.totalEarnings += points_by_period[i].earnings;\r\n\t\t\tvar row = '<tr><td>' + points_by_period[i].period + '</td><td>' + points_by_period[i].points.toFixed(2) + '</td><td>$' + points_by_period[i].earnings.toFixed(2) + '</td></tr>';\r\n\t\t\t$(\"#results\").append(row);\r\n\t\t}\r\n\t\t\r\n\t\trs.send(\"__set_show_up_fee__\", {show_up_fee: state.totalEarnings});\r\n\t\tvar row = '<tr class= \"warning\"><td>Average:</td><td>' + (rs.accumulated_points / (rs.period - 1)).toFixed(2) + '</td><td>$' + (state.totalEarnings / (rs.period - 1)).toFixed(2) + '</td></tr>';\r\n\t\t$(\"#results\").append(row);\r\n\t\tvar row = '<tr class= \"success\"><td>Total:</td><td>' + rs.accumulated_points.toFixed(2) + '</td><td>$' + state.totalEarnings.toFixed(2) + '</td></tr>';\r\n\t\t$(\"#results\").append(row);\r\n\t});\r\n\r\n}]);"}}]